// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id Int @id @default(autoincrement()) @unique
  name String @db.VarChar(100)
  email String @db.VarChar(100) @unique
  password String @db.VarChar

  created_at DateTime @default(now())

  @@map("users")
}

model Book {
  id Int @id @default(autoincrement()) @unique
  name String @db.VarChar(100)
  author String @db.VarChar(100)
  publisher String @db.VarChar(100)
  yearOfPublication Int 
  photo String @db.VarChar(250)
  location String @db.VarChar(100)
  description String @db.VarChar(500)

  category Category @relation(fields: [categoryId], references: [id])
  categoryId Int

  lends Lend[]

  created_at DateTime @default(now())

  @@map("book")
}

model Category {
  id Int @id @default(autoincrement()) @unique
  name String @db.VarChar(100)

  books Book[]

  created_at DateTime @default(now())

  @@map("category")
}

model Member {
  id Int @default(autoincrement()) @unique
  name String @db.VarChar(100)
  email String @db.VarChar(100) @unique
  phone String @db.VarChar(20)
  birthDay DateTime 
  cpf String @db.VarChar(14)
  address String @db.VarChar(100)

  created_at DateTime @default(now())

  lends Lend[]

  @@map("member")
}

model Lend {
  id Int @default(autoincrement()) @unique
  date DateTime
  status String @db.VarChar(50)

  member Member @relation(fields: [memberId], references: [id])
  memberId Int

  book Book @relation(fields: [bookId], references: [id])
  bookId Int

  created_at DateTime @default(now())

  @@map("lend")
}